import pygame, time, random
pygame.init()

#setting the size of the screen
SCREEN_WIDTH = 600
SCREEN_HEIGHT = 720
screen = pygame.display.set_mode((SCREEN_WIDTH,SCREEN_HEIGHT), pygame.RESIZABLE)

#Setting the icon and name for the game
game_icon = pygame.image.load('caricon.jpg')
pygame.display.set_icon(game_icon)
pygame.display.set_caption("Car game")

#colour specifics
grey = (105, 105, 105)
white = (250, 249, 246)

clock = pygame.time.Clock()

#car properties
car_width = 135
car_height = 135

#approaching car properties


#options for where the car can spawn, in a list
lane_positions = [
    SCREEN_WIDTH // 8 - car_width // 2,            # Lane 1
    SCREEN_WIDTH // 4 + SCREEN_WIDTH // 8 - car_width // 2,  # Lane 2
    SCREEN_WIDTH // 2 + SCREEN_WIDTH // 8 - car_width // 2,  # Lane 3
    SCREEN_WIDTH - SCREEN_WIDTH // 8 - car_width // 2        # Lane 4
]
lane_number = random.randint(0, 3)
car_x = lane_positions[lane_number]
car_y = SCREEN_HEIGHT // 1.22
#options for approaching cars to spawn
lane_positions2 = [
    SCREEN_WIDTH // 8 - car_width // 2 - 10,            # Lane 1
    SCREEN_WIDTH // 4 + SCREEN_WIDTH // 8 - car_width // 2 - 10,  # Lane 2
    SCREEN_WIDTH // 2 + SCREEN_WIDTH // 8 - car_width // 2 - 10,  # Lane 3
    SCREEN_WIDTH - SCREEN_WIDTH // 8 - car_width // 2 - 10        # Lane 4
]
lane_number = random.randint(0, 3)
car2_x = lane_positions2[lane_number]
car2_y = random.randint(-800, -100)
#line/lane variables
lines_width = 10
lines_height = 720
line1_x = SCREEN_WIDTH // 4 - 5
line2_x = SCREEN_WIDTH // 2 - 5
line3_x = 445


#loading sprite for car
car_image = pygame.image.load("silvercar.png").convert_alpha()
car_image = pygame.transform.scale(car_image, (car_width, car_height)) # Resize to fit car dimensions
#sprite for approaching car
crashcar_image = pygame.image.load("opoocar1.png").convert_alpha()
crashcar_image = pygame.transform.scale(crashcar_image, (car_width, car_height))

#class for approaching cars
class crashcars:
    def __init__(self, crashcar_image, lane_positions2, car_width, car_height, screen_height):
        self.crashcar_image = crashcar_image
        self.lane_positions2 = lane_positions2
        self.car_width = car_width
        self.car_height = car_height
        self.screen_height = screen_height
    
    def reset(self, all_cars):
        max_attempts = 10
        for _ in range(max_attempts):
            lane_index = random.randint(0, 3)
            y_pos = random.randint(-800, -100)
            
    #drawing the cars
    def draw(self, screen):
        screen.blit(self.crashcar_image, (self.x, self.y))

#creating the other cars
crash_cars = []
for _ in range(4):
    enemy = crashcars(crashcar_image, lane_positions2, car_width, car_height, SCREEN_HEIGHT)#specifics of the cars
    crash_cars.append(enemy)

#afterdying
def game_over_screen():
    font_1 = pygame.font.Font(None, 74)
    font_2 = pygame.font.Font(None, 36)#fonts and sizing for words 

    game_over_text = font_1.render("GAME OVER", True, (255, 0, 0))#specifics for message
    restart_text = font_2.render("Press R to Restart or Q to Quit", True, (255, 255, 255))

    while True:
        screen.fill((0, 0, 0))  #black background
        screen.blit(game_over_text, (SCREEN_WIDTH//2 - game_over_text.get_width()//2, SCREEN_HEIGHT//3))
        screen.blit(restart_text, (SCREEN_WIDTH//2 - restart_text.get_width()//2, SCREEN_HEIGHT//2))

        pygame.display.update()

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                exit()
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_q:
                    pygame.quit()
                    exit()
                if event.key == pygame.K_r:
                    return  #this will restart the game

def main_game():
    global lane_number, car_x, car_y, crash_cars  #to be used again 

    #reset player position
    lane_number = random.randint(0, 3)
    car_x = lane_positions[lane_number]
    car_y = SCREEN_HEIGHT // 1.22

    #reset enemy cars
    crash_cars = []
    for _ in range(4):
        enemy = crashcars(crashcar_image, lane_positions2, car_width, car_height, SCREEN_HEIGHT)
        crash_cars.append(enemy)

#game loop
    running = True
    while running:
        screen.fill(grey)#filling the background

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_LEFT and lane_number > 0:
                    lane_number -= 1
                    car_x = lane_positions[lane_number]
                if event.key == pygame.K_RIGHT and lane_number < 3:
                    lane_number += 1
                    car_x = lane_positions[lane_number] #moving the car left and right
        
    
        for enemy in crash_cars:
            enemy.update(crash_cars)
            enemy.draw(screen)

        #rectangles for collision detection
        player_rect = pygame.Rect(car_x, car_y, car_width, car_height)

        for enemy in crash_cars:
            if player_rect.colliderect(enemy.get_rect()):
                game_over_screen()
                main_game()
                return
            
        pygame.draw.rect(screen, white, (line1_x, 0, lines_width, lines_height))
        pygame.draw.rect(screen, white, (line2_x, 0, lines_width, lines_height))
        pygame.draw.rect(screen, white, (line3_x, 0, lines_width, lines_height))

        screen.blit(car_image, (car_x, car_y))#making the car image appear

        pygame.display.update()

        clock.tick(60)

main_game()

pygame.quit()
